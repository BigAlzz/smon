# Generated by Django 4.2.7 on 2025-08-20 09:28

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0002_rename_targets_operationalplanitem_target_description'),
    ]

    operations = [
        migrations.CreateModel(
            name='Target',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name/description of this target', max_length=200)),
                ('value', models.DecimalField(decimal_places=2, help_text='Target value to achieve', max_digits=15)),
                ('unit', models.CharField(choices=[('NUMBER', 'Number'), ('PERCENTAGE', 'Percentage'), ('CURRENCY', 'Currency (ZAR)'), ('RATIO', 'Ratio'), ('DAYS', 'Days'), ('HOURS', 'Hours'), ('PEOPLE', 'People'), ('DOCUMENTS', 'Documents'), ('EVENTS', 'Events'), ('OTHER', 'Other')], default='NUMBER', max_length=20)),
                ('baseline', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Starting baseline value', max_digits=15)),
                ('due_date', models.DateField(help_text='When this target should be achieved')),
                ('periodicity', models.CharField(choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUAL', 'Annual'), ('MILESTONE', 'Milestone-based')], default='ANNUAL', max_length=20)),
                ('green_threshold', models.DecimalField(decimal_places=2, default=Decimal('95.00'), help_text='Minimum percentage for Green status', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('amber_threshold', models.DecimalField(decimal_places=2, default=Decimal('80.00'), help_text='Minimum percentage for Amber status', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('positive_tolerance', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Acceptable positive variance percentage', max_digits=5)),
                ('negative_tolerance', models.DecimalField(decimal_places=2, default=Decimal('5.00'), help_text='Acceptable negative variance percentage', max_digits=5)),
                ('is_cumulative', models.BooleanField(default=True, help_text='Whether progress accumulates over time')),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('plan_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='core.operationalplanitem')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Target',
                'verbose_name_plural': 'Targets',
                'ordering': ['plan_item', 'due_date'],
            },
        ),
        migrations.CreateModel(
            name='CostLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cost_type', models.CharField(choices=[('INPUT', 'Input Cost'), ('OUTPUT', 'Output Cost'), ('OPERATIONAL', 'Operational Cost'), ('CAPITAL', 'Capital Cost')], default='INPUT', max_length=20)),
                ('description', models.CharField(help_text='Description of this cost item', max_length=200)),
                ('budgeted_amount', models.DecimalField(decimal_places=2, help_text='Originally budgeted amount', max_digits=15)),
                ('committed_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Amount committed/contracted', max_digits=15)),
                ('actual_spend', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Actual amount spent', max_digits=15)),
                ('cost_period_start', models.DateField()),
                ('cost_period_end', models.DateField()),
                ('funding_source', models.CharField(choices=[('GOVERNMENT', 'Government Grant'), ('DONOR', 'Donor Funding'), ('INTERNAL', 'Internal Revenue'), ('OTHER', 'Other Sources')], default='GOVERNMENT', max_length=20)),
                ('purchase_order_number', models.CharField(blank=True, help_text='PO or reference number', max_length=50)),
                ('supplier_vendor', models.CharField(blank=True, help_text='Supplier or vendor name', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('plan_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_lines', to='core.operationalplanitem')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Cost Line',
                'verbose_name_plural': 'Cost Lines',
                'ordering': ['plan_item', 'cost_period_start'],
            },
        ),
        migrations.CreateModel(
            name='ProgressUpdate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('period_type', models.CharField(choices=[('MONTHLY', 'Monthly'), ('QUARTERLY', 'Quarterly'), ('ANNUAL', 'Annual'), ('MILESTONE', 'Milestone')], default='MONTHLY', max_length=20)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('period_name', models.CharField(help_text="e.g., 'April 2024', 'Q1 2024/25'", max_length=50)),
                ('actual_value', models.DecimalField(decimal_places=2, help_text='Actual achievement for this period', max_digits=15)),
                ('narrative', models.TextField(help_text='Explanation of progress, challenges, achievements')),
                ('evidence_urls', models.JSONField(blank=True, default=list, help_text='URLs to supporting evidence/documents')),
                ('risk_rating', models.CharField(choices=[('LOW', 'Low Risk'), ('MEDIUM', 'Medium Risk'), ('HIGH', 'High Risk'), ('CRITICAL', 'Critical Risk')], default='LOW', max_length=20)),
                ('issues', models.TextField(blank=True, help_text='Current issues or challenges')),
                ('corrective_actions', models.TextField(blank=True, help_text='Actions being taken to address issues')),
                ('forecast_value', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated final achievement (EAC - Estimate at Completion)', max_digits=15, null=True)),
                ('forecast_confidence', models.CharField(blank=True, choices=[('HIGH', 'High Confidence'), ('MEDIUM', 'Medium Confidence'), ('LOW', 'Low Confidence')], default='MEDIUM', max_length=20)),
                ('is_submitted', models.BooleanField(default=False, help_text='Whether this update has been submitted')),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('is_approved', models.BooleanField(default=False, help_text='Whether this update has been approved by senior manager')),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_progress_updates', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('target', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_updates', to='progress.target')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Progress Update',
                'verbose_name_plural': 'Progress Updates',
                'ordering': ['-period_end', 'target'],
                'unique_together': {('target', 'period_start', 'period_end')},
            },
        ),
    ]
